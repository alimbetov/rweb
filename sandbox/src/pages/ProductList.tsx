import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  filterProducts,
  searchProductsByName, // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
  deleteProduct,
  fetchCategories,
  fetchSubCategories,
} from "../apidata/productService";
import { Product, Category, SubCategory } from "../types/types";

const ProductList: React.FC = () => {
  const navigate = useNavigate();
  const [products, setProducts] = useState<Product[]>([]);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [categoryCode, setCategoryCode] = useState<string>("");
  const [subCategoryCode, setSubCategoryCode] = useState<string>("");
  const [categories, setCategories] = useState<Category[]>([]);
  const [subCategories, setSubCategories] = useState<SubCategory[]>([]);
  const [page, setPage] = useState<number>(0);
  const [totalPages, setTotalPages] = useState<number>(1);

  useEffect(() => {
    loadCategories();
  }, []);

  useEffect(() => {
    loadProducts();
  }, [searchQuery, categoryCode, subCategoryCode, page]);

  const loadProducts = async () => {
    try {
      let data;
      if (searchQuery.trim() !== "") {
        // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º API –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        data = await searchProductsByName(searchQuery, page, 10);
      } else {
        // ‚úÖ –ò–Ω–∞—á–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        data = await filterProducts(categoryCode, subCategoryCode, page, 10);
      }

      setProducts(data.content);
      setTotalPages(data.totalPages);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    }
  };

  const loadCategories = async () => {
    try {
      const categoriesData = await fetchCategories();
      setCategories(categoriesData);

      const subCategoriesData = await fetchSubCategories();
      setSubCategories(subCategoriesData);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    }
  };

  const handleDelete = async (id: number) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?")) {
      await deleteProduct(id);
      loadProducts();
    }
  };

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h1>

      {/* –ü–æ–ª—è –ø–æ–∏—Å–∫–∞ */}
      <div className="mb-4 flex">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="px-4 py-2 border rounded w-1/3"
        />

        {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <select
          value={categoryCode}
          onChange={(e) => setCategoryCode(e.target.value)}
          className="px-4 py-2 border rounded w-1/3 ml-2"
        >
          <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          {categories.map((category) => (
            <option key={category.code} value={category.code}>
              {category.nameRu}
            </option>
          ))}
        </select>

        {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <select
          value={subCategoryCode}
          onChange={(e) => setSubCategoryCode(e.target.value)}
          className="px-4 py-2 border rounded w-1/3 ml-2"
          disabled={!categoryCode} // ‚úÖ –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        >
          <option value="">–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          {subCategories
            .filter((sub) => sub.categoryCode === categoryCode) // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            .map((subCategory) => (
              <option key={subCategory.code} value={subCategory.code}>
                {subCategory.nameRu}
              </option>
            ))}
        </select>

        <button
          onClick={loadProducts}
          className="ml-2 px-4 py-2 bg-blue-500 text-white rounded"
        >
          üîç –ò—Å–∫–∞—Ç—å
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" */}
      <button
        onClick={() => navigate("/mod/products/new")}
        className="mb-4 px-4 py-2 bg-green-500 text-white rounded"
      >
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
      </button>

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <table className="min-w-full bg-white border">
        <thead>
          <tr className="bg-gray-200">
            <th className="py-2 px-4 border">ID</th>
            <th className="py-2 px-4 border">–ù–∞–∑–≤–∞–Ω–∏–µ (RU)</th>
            <th className="py-2 px-4 border">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th className="py-2 px-4 border">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th className="py-2 px-4 border">–ü—É–±–ª–∏—á–Ω—ã–π</th>
            <th className="py-2 px-4 border">–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {products.map((product) => (
            <tr key={product.id} className="border-t">
              <td className="border px-4 py-2">{product.id}</td>
              <td className="border px-4 py-2">{product.nameRu}</td>
              <td className="border px-4 py-2">{product.categoryCode}</td>
              <td className="border px-4 py-2">
                {product.subCategoryCode ?? "‚Äî"}
              </td>
              <td className="border px-4 py-2">
                {product.isPublic ? "‚úÖ" : "‚ùå"}
              </td>
              <td className="border px-4 py-2">
                <button
                  onClick={() => navigate(`/mod/products/edit/${product.id}`)}
                  className="px-2 py-1 bg-yellow-500 text-white rounded mr-2"
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button
                  onClick={() =>
                    navigate(`/mod/products/${product.id}/attributes`)
                  }
                  className="px-2 py-1 bg-yellow-500 text-white rounded mr-2"
                >
                  üõ†Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã
                </button>

                <button
                  onClick={() => handleDelete(product.id)}
                  className="px-2 py-1 bg-red-500 text-white rounded"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <div className="flex justify-center mt-4">
        <button
          onClick={() => setPage((p) => Math.max(p - 1, 0))}
          disabled={page === 0}
          className="px-3 py-1 bg-gray-300 rounded mr-2"
        >
          ‚¨Ö –ù–∞–∑–∞–¥
        </button>
        <span className="mx-4">
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {totalPages}
        </span>
        <button
          onClick={() => setPage((p) => Math.min(p + 1, totalPages - 1))}
          disabled={page >= totalPages - 1}
          className="px-3 py-1 bg-gray-300 rounded"
        >
          –í–ø–µ—Ä–µ–¥ ‚û°
        </button>
      </div>
    </div>
  );
};

export default ProductList;
