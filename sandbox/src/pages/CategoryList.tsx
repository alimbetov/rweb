import React, { useEffect, useState } from "react";
import {
  fetchCategories,
  searchCategories,
  searchCategoriesByParentCode,
  deleteCategory,
} from "../apidata/goodApi";
import { Category } from "../types/types";
import { useNavigate } from "react-router-dom";
import { useParams } from "react-router-dom";
interface CategoryListProps {
  parentCode?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–∞
}

const CategoryList: React.FC<CategoryListProps> = () => {
  const { parentCode } = useParams<{ parentCode: string }>(); // ‚úÖ –ü–æ–ª—É—á–∞–µ–º `parentCode` –∏–∑ URL
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    loadCategories();
  }, [parentCode]); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ parentCode

  const loadCategories = async () => {
    try {
      if (parentCode) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å parentCode, –∏—â–µ–º –ø–æ –Ω–µ–º—É
        const data = await searchCategoriesByParentCode(parentCode);
        setCategories(data);
      } else {
        // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const data = await fetchCategories();
        setCategories(data);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    }
  };

  const handleEdit = (code: string) => {
    navigate(`/mod/categories/edit/${code}`);
  };

  const handleForChildrenViewEdit = (code: string) => {
    console.log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", code);
    navigate(`/mod/sub-categories/${code}`);
  };
  const handleDelete = async (code: string) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?")) {
      try {
        await deleteCategory(code);
        loadCategories();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
      }
    }
  };

  const handleSearch = async () => {
    try {
      if (searchQuery.trim() === "") {
        loadCategories();
      } else {
        const results = parentCode
          ? await searchCategoriesByParentCode(searchQuery)
          : await searchCategories(searchQuery);
        setCategories(results);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
    }
  };

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h1>

      {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
      <div className="mb-4 flex">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="px-4 py-2 border rounded w-full"
        />
        <button
          onClick={handleSearch}
          className="ml-2 px-4 py-2 bg-blue-500 text-white rounded"
        >
          üîç –ò—Å–∫–∞—Ç—å
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" */}
      <button
        onClick={() => navigate("/mod/categories/new")}
        className="mb-4 px-4 py-2 bg-green-500 text-white rounded"
      >
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      </button>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <table className="min-w-full bg-white">
        <thead>
          <tr className="bg-gray-200">
            <th className="py-2">–ö–æ–¥</th>
            <th className="py-2">–ù–∞–∑–≤–∞–Ω–∏–µ (RU)</th>
            <th className="py-2">–ù–∞–∑–≤–∞–Ω–∏–µ (KZ)</th>
            <th className="py-2">–ù–∞–∑–≤–∞–Ω–∏–µ (EN)</th>
            <th className="py-2">–ì—Ä—É–ø–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</th>
            <th className="py-2">–ü—É–±–ª–∏—á–Ω–∞—è</th>
            <th className="py-2">–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {categories.map((category) => (
            <tr key={category.code} className="border-t">
              <td className="border px-4 py-2">{category.code}</td>
              <td className="border px-4 py-2">{category.nameRu}</td>
              <td className="border px-4 py-2">{category.nameKz}</td>
              <td className="border px-4 py-2">{category.nameEn}</td>
              <td className="border px-4 py-2">{category.groupCode}</td>
              <td className="border px-4 py-2">
                {category.isPublic ? "‚úÖ" : "‚ùå"}
              </td>
              <td className="border px-4 py-2">
                <button
                  onClick={() => handleEdit(category.code)}
                  className="px-2 py-1 bg-yellow-500 text-white rounded mr-2"
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button
                  onClick={() => handleDelete(category.code)}
                  className="px-2 py-1 bg-red-500 text-white rounded"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
                <button
                  onClick={() => handleForChildrenViewEdit(category.code)}
                  className="px-2 py-1 bg-blue-500 text-white rounded"
                >
                  üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CategoryList;
