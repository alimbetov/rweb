import { CityCoordinates } from "../types/types";
import apiClient from "./apiClient";

apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ======================= üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ =======================

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É –≥–æ—Ä–æ–¥–∞
export const fetchCityCoordinates = async (
  cityCode: string
): Promise<CityCoordinates> => {
  try {
    const response = await apiClient.get(`/api/geo/cities/${cityCode}/coordinates`);
    return response.data;
  } catch (error: any) {
    if (error.response?.status === 404) {
      // –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äî –Ω–µ –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é
      throw new Error("not_found");
    }
    throw error;
  }
};

// üîπ –°–æ–∑–¥–∞—Ç—å / –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
export const saveCityCoordinates = async (
  cityCode: string,
  coordinates: CityCoordinates
): Promise<CityCoordinates> => {
  const response = await apiClient.post(
    `/api/geo/cities/${cityCode}/coordinates`,
    coordinates
  );
  return response.data;
};

// üîπ –£–¥–∞–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
export const deleteCityCoordinates = async (cityCode: string): Promise<void> => {
  await apiClient.delete(`/api/geo/cities/${cityCode}/coordinates`);
};