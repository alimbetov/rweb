// src/api/offerApi.ts
import apiClient from "./apiClient";
import { CityLocalDto, OfferFormDTO } from "../types/types"; // –ø—É—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
import { AxiosResponse } from "axios";


apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
/**
 * üîÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ (POST /api/offers/generate)
 */
export const generateOfferForm = async (productId: number): Promise<OfferFormDTO> => {
  const response: AxiosResponse<OfferFormDTO> = await apiClient.post(
    "/api/offers/generate",
    null,
    {
      params: { productId },
    }
  );
  return response.data;
};

/**
 * üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ (PUT /api/offers/update)
 */
export const updateOfferForm = async (offer: OfferFormDTO): Promise<OfferFormDTO> => {
  const response: AxiosResponse<OfferFormDTO> = await apiClient.put(
    "/api/offers/update",
    offer
  );
  return response.data;
};

/**
 * üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (GET /api/offers/filter)
 */
export const fetchFilteredOffers_old = async (params: {
  productId?: number;
  status?: string;
  other?: boolean;
  page?: number;
  size?: number;
  sort?: string;
}): Promise<{
  content: OfferFormDTO[];
  totalElements: number;
  totalPages: number;
}> => {
  const response = await apiClient.get("/api/offers/filter", { params });
  return response.data;
};

interface OfferFilterParams {
  productId?: number;
  status?: string;
  other?: boolean;
  page?: number;
  size?: number;
  sort?: string;
  cities?: CityLocalDto[]; // <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ!
}

export const fetchFilteredOffers = async (params: OfferFilterParams): Promise<{
  content: OfferFormDTO[];
  totalElements: number;
  totalPages: number;
}> => {
  // üîç –†–∞–∑–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const { productId, status, other, page, size, sort, cities } = params;

  // üì¶ Query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–¥—É—Ç –≤ URL)
  const queryParams = {
    productId,
    status,
    other,
    page,
    size,
    sort,
  };

  // üì¶ Body-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const body = {
    cities: cities ?? [], // –µ—Å–ª–∏ undefined ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
  };

  const response: AxiosResponse<any> = await apiClient.post(
    "/api/offers/filter",
    body,
    {
      params: queryParams,
    }
  );

  return response.data;
};
