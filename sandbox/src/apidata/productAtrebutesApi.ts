import apiClient from "../apidata/apiClient";
import { Product, Attribute, ProductAttributeDTO } from "../types/types";

// === –†–∞–±–æ—Ç–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ ===
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// === –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ ===

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
export const fetchProductById = async (productId: number): Promise<Product> => {
  const response = await apiClient.get(
    `/api/product-attributes/product/${productId}`
  );
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
export const fetchProductByproductId = async (id: number): Promise<Product> => {
  const response = await apiClient.get(`/api/products/${id}`);
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `ProductAttributeDTO[]`)
export const fetchProductAttributesByProductId = async (
  productId: number,
  attributeId?: number
): Promise<ProductAttributeDTO[]> => {
  const response = await apiClient.get(`/api/product-attributes/${productId}`, {
    params: attributeId ? { attributeId } : {},
  });
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ/–Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `Attribute[]`)
export const fetchProductAttributesList = async (
  productId: number,
  isBounded: boolean
): Promise<Attribute[]> => {
  const response = await apiClient.get(`/api/product-attributes/attributes`, {
    params: { productId, isBounded },
  });
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ `isBounded`)
export const fetchAttributeDTOList = async (
  productId: number,
  isBounded: boolean
): Promise<Attribute[]> => {
  const response = await apiClient.get(`/api/product-attributes/attributes`, {
    params: { productId, isBounded },
  });
  return response.data;
};

// üîπ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç –∫ –ø—Ä–æ–¥—É–∫—Ç—É
export const bindAttributeToProduct = async (
  productId: number,
  attributeId: number
): Promise<ProductAttributeDTO[]> => {
  const response = await apiClient.post(`/api/product-attributes/bind`, null, {
    params: { productId, attributeId },
  });
  return response.data;
};

// üîπ –û—Ç–≤—è–∑–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
export const unbindAttributeFromProduct = async (
  productId: number,
  attributeId: number
): Promise<ProductAttributeDTO[]> => {
  const response = await apiClient.delete(`/api/product-attributes/unbind`, {
    params: { productId, attributeId },
  });
  return response.data;
};
