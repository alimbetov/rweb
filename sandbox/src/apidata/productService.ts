import apiClient from "../apidata/apiClient";
import { Product, Category, SubCategory } from "../types/types";

// üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å—ã
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// ========================== CRUD –¢–û–í–ê–†–û–í ==========================

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
export const fetchProductById = async (id: number): Promise<Product> => {
  const response = await apiClient.get(`/api/products/${id}`);
  return response.data;
};

// üîπ –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
export const createProduct = async (product: Product): Promise<Product> => {
  const response = await apiClient.post("/api/products", product);
  return response.data;
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const updateProduct = async (
  id: number,
  product: Product
): Promise<Product> => {
  const response = await apiClient.put(`/api/products/${id}`, product);
  return response.data;
};

// üîπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
export const deleteProduct = async (id: number): Promise<void> => {
  await apiClient.delete(`/api/products/${id}`);
};

// ========================== –ü–û–ò–°–ö –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô ==========================

// üîπ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (RU, KZ, EN) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const searchProductsByName = async (
  query: string,
  page: number = 0,
  size: number = 10
): Promise<{ content: Product[]; totalPages: number }> => {
  const response = await apiClient.get("/api/products/search", {
    params: { query, page, size },
  });
  return response.data;
};

// üîπ –§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const filterProducts = async (
  categoryCode?: string,
  subCategoryCode?: string,
  page: number = 0,
  size: number = 10
): Promise<{ content: Product[]; totalPages: number }> => {
  const response = await apiClient.get("/api/products/filter", {
    params: { categoryCode, subCategoryCode, page, size },
  });
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const fetchCategories = async (): Promise<Category[]> => {
  const response = await apiClient.get("/api/good/category");
  return response.data;
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const fetchSubCategories = async (): Promise<SubCategory[]> => {
  const response = await apiClient.get("/api/good/sub-category");
  return response.data;
};
