// src/api/mediaApi.ts
import apiClient from "./apiClient";
import { AxiosResponse } from "axios";

// üîê –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// üßæ DTO –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
export interface StoredFileDTO {
  id: number;                     // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
  originalFilename: string;      // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  contentType: string;           // MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, image/jpeg, video/mp4)
  size: number;                  // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
  url: string;                   // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ S3)
  previewUrl: string;            // URL –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞)
  signedUrl: string | null;      // –ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)
  mediaType: "IMAGE" | "VIDEO" | "DOCUMENT" | "AUDIO" | "OTHER"; // –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  editable: boolean;             // üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

/**
 * üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–≤—è–∑–∏ (linkedType, linkedId)
 */
export const uploadFile = async (
  file: File,
  linkedType: string,
  linkedId: number,
  storeInDatabase: boolean = false,
  isPublic: boolean = true
): Promise<StoredFileDTO> => {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("linkedType", linkedType);
  formData.append("linkedId", linkedId.toString());
  formData.append("storeInDatabase", storeInDatabase.toString());
  formData.append("isPublic", isPublic.toString());


  const response: AxiosResponse<StoredFileDTO> = await apiClient.post(
    "/api/media/upload",
    formData,
    {
      headers: {
        "Content-Type": undefined, // –í–ê–ñ–ù–û! –£–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã Axios —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª boundary
      },
    }
  );

  return response.data;
};

/**
 * üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–≤—è–∑—å—é
 */
export const uploadMultipleFiles = async (
  files: File[],
  linkedType: string,
  linkedId: number,
  storeInDatabase: boolean = false,
  isPublic: boolean = true
): Promise<StoredFileDTO[]> => {
  const formData = new FormData();
  files.forEach((file) => {
    formData.append("files", file);
  });
  formData.append("linkedType", linkedType);
  formData.append("linkedId", linkedId.toString());
  formData.append("storeInDatabase", storeInDatabase.toString());
  formData.append("isPublic", isPublic.toString());


  const response: AxiosResponse<StoredFileDTO[]> = await apiClient.post(
    "/api/media/upload-multiple",
    formData,
    {
      headers: {
        "Content-Type": undefined,
      },
    }
  );
  return response.data;
};

/**
 * üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å—É—â–Ω–æ—Å—Ç—å—é (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
 */
export const fetchLinkedMediaPaged = async (
  linkedType: string,
  linkedId: number,
  page: number = 0,
  size: number = 10
): Promise<{
  content: StoredFileDTO[];
  totalElements: number;
  totalPages: number;
}> => {
  const response = await apiClient.get("/api/media/linked/paged", {
    params: { linkedType, linkedId, page, size }
  });
  return response.data;
};

/**
 * ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ ID (–µ—Å–ª–∏ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î)
 */
export const downloadMediaFile = async (id: number): Promise<Blob> => {
  const response = await apiClient.get(`/api/media/download/${id}`, {
    responseType: "blob",
  });
  return response.data;
};

/**
 * ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ ID
 */
export const deleteMediaFile = async (id: number): Promise<void> => {
  await apiClient.delete(`/api/media/${id}`);
};


/**
 * üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
 */
export const setFilePublic = async (
  fileId: number,
  isPublic: boolean
): Promise<void> => {
  await apiClient.put("/api/media/set-public", null, {
    params: { fileId, isPublic },
  });
};

/**
 * ‚≠ê –°–¥–µ–ª–∞—Ç—å —Ñ–∞–π–ª –≥–ª–∞–≤–Ω—ã–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–π)
 */
export const setFileAsMain = async (
  fileId: number
): Promise<void> => {
  await apiClient.put("/api/media/set-main", null, {
    params: { fileId },
  });
};
