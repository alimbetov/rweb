import { Category, CategoryGroup, SubCategory } from "../types/types";
import apiClient from "../apidata/apiClient";

// üîπ –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// ========================== CATEGORY GROUP ==========================

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const fetchCategoryGroups = async (): Promise<CategoryGroup[]> => {
  const response = await apiClient.get("/api/good/category-group");
  return response.data;
};

// üîπ –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const searchCategoryGroups = async (
  query: string
): Promise<CategoryGroup[]> => {
  const response = await apiClient.get("/api/good/category-group/search", {
    params: { query },
  });
  return response.data;
};

// üîπ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const createCategoryGroup = async (
  group: CategoryGroup
): Promise<CategoryGroup> => {
  const response = await apiClient.post("/api/good/category-group", group);
  return response.data;
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const updateCategoryGroup = async (
  code: string,
  group: CategoryGroup
): Promise<CategoryGroup> => {
  const response = await apiClient.put(
    `/api/good/category-group/${code}`,
    group
  );
  return response.data;
};

// üîπ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const deleteCategoryGroup = async (code: string): Promise<void> => {
  await apiClient.delete(`/api/good/category-group/${code}`);
};

// ========================== CATEGORY ==========================

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const fetchCategories = async (): Promise<Category[]> => {
  const response = await apiClient.get("/api/good/category");
  return response.data;
};

// üîπ –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const searchCategories = async (query: string): Promise<Category[]> => {
  const response = await apiClient.get("/api/good/category/search", {
    params: { query },
  });
  return response.data;
};

export const searchCategoriesByParentCode = async (
  query: string
): Promise<Category[]> => {
  const response = await apiClient.get("/api/good/category/search-by-parent", {
    params: { query },
  });
  return response.data;
};

// üîπ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const createCategory = async (category: Category): Promise<Category> => {
  const response = await apiClient.post("/api/good/category", category);
  return response.data;
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const updateCategory = async (
  code: string,
  category: Category
): Promise<Category> => {
  const response = await apiClient.put(`/api/good/category/${code}`, category);
  return response.data;
};

// üîπ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const deleteCategory = async (code: string): Promise<void> => {
  await apiClient.delete(`/api/good/category/${code}`);
};

// ========================== SUB CATEGORY ==========================

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const fetchSubCategories = async (): Promise<SubCategory[]> => {
  const response = await apiClient.get("/api/good/sub-category");
  return response.data;
};

// üîπ –ü–æ–∏—Å–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const searchSubCategories = async (
  query: string
): Promise<SubCategory[]> => {
  const response = await apiClient.get("/api/good/sub-category/search", {
    params: { query },
  });
  return response.data;
};

export const searchSubCategoriesByParentCode = async (
  query: string
): Promise<SubCategory[]> => {
  const response = await apiClient.get(
    "/api/good/sub-category/search-by-parent",
    { params: { query } }
  );
  return response.data;
};

// üîπ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const createSubCategory = async (
  subCategory: SubCategory
): Promise<SubCategory> => {
  const response = await apiClient.post("/api/good/sub-category", subCategory);
  return response.data;
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const updateSubCategory = async (
  code: string,
  subCategory: SubCategory
): Promise<SubCategory> => {
  const response = await apiClient.put(
    `/api/good/sub-category/${code}`,
    subCategory
  );
  return response.data;
};

// üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const deleteSubCategory = async (code: string): Promise<void> => {
  await apiClient.delete(`/api/good/sub-category/${code}`);
};
